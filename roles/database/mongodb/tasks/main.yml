---
# File: main.yml
# Type: task
# Part: MongoDB

## Install
- include: install-arm.yml
  when: ansible_architecture == 'armv6l' or ansible_architecture == 'armv7l'
- include: install-ubuntu.yml
  when: ansible_distribution == 'Ubuntu'
- service: name=mongodb state=stopped enabled=yes
  when: ansible_distribution == 'Ubuntu'

## Install ansible related packages
- name: MongoDB | Install pymongo package
  apt: name=python-pip state={{ mongodb_apt_state }}
- pip: name=pymongo state=present

## Setup custom location
- include: location.yml
  when: "'{{ mongodb_path }}' != '/var/lib/mongodb'"

## Configure user
- name: MongoDB | Setup group
  user: name={{ mongodb_group }}
- name: MongoDB | Setup user
  user: name={{ mongodb_user }} group={{ mongodb_group }} home="/var/lib/mongodb" shell="/bin/false" comment="MongoDB Server"

## Configure MongoDB
- name: MongoDB | Backup configuration
  shell: creates=/etc/mongodb.conf.orig cp /etc/mongodb.conf /etc/mongodb.conf.orig
  ignore_errors: True
  register: result
- fetch: src=/etc/mongodb.conf.orig dest=fetched
  when: result|changed
- name: MongoDB | Ensure log folder exists
  file: path=/var/log/mongodb state=directory owner={{ mongodb_user }} group={{ mongodb_group }} mode=0755
- name: MongoDB | Deploy configuration
  template: src=mongodb.conf.j2 dest=/etc/mongodb.conf owner=root group=root mode=0644 backup=yes
  notify: restart mongodb
  register: result
- fetch: src=/etc/mongodb.conf dest=fetched
  when: result|changed

## Configure service
- include: configure-upstart.yml
  when: ansible_cmdline.user != 'docker'
- include: configure-supervisor.yml
  when: ansible_cmdline.user == 'docker'

## Check service
- name: MongoDB | Check service daemon
  service: name=mongodb state=started enabled=yes
